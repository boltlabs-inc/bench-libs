Steps before running IssueInitCloseToken/IssueCloseToken
  Generate wallet and wallet keys
    wallet should contain the payback key pair for this transaction
    wallet should contain the public and private revocation key pair
    Balances
  Generate wallet commitment


Establish. IssueInitCloseToken
  wpk, wsk, t, close-msg_w 

MPC Inputs:

  tx_input:
    Previous Tx: <Hash of Escrow-Tx>   [WE NEED ONE OF THESE FOR THE FUNDING TX AND ONE FOR THE MERCHANT-CLOSE-TX]
    Index: 0
    scriptSig: < Sig 1 > < Sig 2 > 
  tx_output:
    Index: 0
    Value: Whatever [Balance Merchant init]
    scriptPubKey: 
      Pay to Merchant Public Key [Could be controlled by the merchant]

    Index: 1
    Value: Whatever
    scriptPubKey: 
      OP_IF
          # Penalty transaction
          <wallet public key> ----> In the bitcoin case this is literally wpk_i
          OP_CHECKSIGVERIFY
          OP_DROP
          <Merchant Key>
      OP_ELSE
          `to_self_delay`
          OP_CHECKSEQUENCEVERIFY
          OP_DROP
          <public key owned by customer> [This thing is not checked]
      OP_ENDIF
      OP_CHECKSIG

    Index: 2
    Value: 0
    scriptPubKey:
      channel_pk OP_RETURN [What is the channel_pk]


  Other Checks:
    Verify public inputs (unless this is easily supported by the framework?)
    Make sure the commitment input by each player is to the same wallet, and matches the other inputs
    Make sure the recovationpubkey matches the private key in the wallet being signed
      + add in the wallet and verify the commitment into the mpc protocol
    Scripts/formatting are correct
    input hash matches the funding transaction

    Verify the continuity of the wallets

  Ops: Signed 
    Generate a signature in the scriptSig of tx_input[0] that will be checked with OP_CHECKMULTISIG