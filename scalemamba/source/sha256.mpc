# digest = Array(8, sregint)
# count_lo = sregint(0)
# count_hi = sregint(0)
# data = Array(SHA_BLOCKSIZE, sregint)
# local = sregint(0)
# digestsize = sregint(0)
# final_data = Array(SHA_BLOCKSIZE, sregint)


def ROR(x, y):
    return (((x & 0xffffffff) >> (y & 31)) | (x << (32 - (y & 31)))) & 0xffffffff

def Ch(x, y, z):
    return (z ^ (x & (y ^ z)))

def Maj(x, y, z):
    return (((x | y) & z) | (x & y))

def S(x, n): 
    return ROR(x, n)

def R(x,n):
    return (x & 0xffffffff) >> n

def Sigma0(x):
    return (S(x, 2) ^ S(x, 13) ^ S(x, 22))

def Sigma1(x):
    return (S(x, 6) ^ S(x, 11) ^ S(x, 25))

def Gamma0(x):
    return (S(x, 7) ^ S(x, 18) ^ R(x, 3))

def Gamma1(x):
    return (S(x, 17) ^ S(x, 19) ^ R(x, 10))

def RND(a,b,c,d,e,f,g,h,i,Wi,ki):
    t0 = h + Sigma1(e) + Ch(e, f, g) + ki + Wi;
    t1 = Sigma0(a) + Maj(a, b, c);
    d += t0;
    h  = t0 + t1;
    return d & 0xffffffff, h & 0xffffffff

def sha_transform(digest, data_chunk):
    W = Array(64, sregint)
    # W = [0]*64
    
    # for i in range(0,16):
    #     W.append( (d[4*i]<<24) + (d[4*i+1]<<16) + (d[4*i+2]<<8) + d[4*i+3])

    W[0]  = ((data_chunk[0 ]<<24) + (data_chunk[1 ]<<16) + (data_chunk[2 ]<<8) + data_chunk[3 ])
    W[1]  = ((data_chunk[4 ]<<24) + (data_chunk[5 ]<<16) + (data_chunk[6 ]<<8) + data_chunk[7 ])
    W[2]  = ((data_chunk[8 ]<<24) + (data_chunk[9 ]<<16) + (data_chunk[10]<<8) + data_chunk[11])
    W[3]  = ((data_chunk[12]<<24) + (data_chunk[13]<<16) + (data_chunk[14]<<8) + data_chunk[15])
    W[4]  = ((data_chunk[16]<<24) + (data_chunk[17]<<16) + (data_chunk[18]<<8) + data_chunk[19])
    W[5]  = ((data_chunk[20]<<24) + (data_chunk[21]<<16) + (data_chunk[22]<<8) + data_chunk[23])
    W[6]  = ((data_chunk[24]<<24) + (data_chunk[25]<<16) + (data_chunk[26]<<8) + data_chunk[27])
    W[7]  = ((data_chunk[28]<<24) + (data_chunk[29]<<16) + (data_chunk[30]<<8) + data_chunk[31])
    W[8]  = ((data_chunk[32]<<24) + (data_chunk[33]<<16) + (data_chunk[34]<<8) + data_chunk[35])
    W[9]  = ((data_chunk[36]<<24) + (data_chunk[37]<<16) + (data_chunk[38]<<8) + data_chunk[39])
    W[10] = ((data_chunk[40]<<24) + (data_chunk[41]<<16) + (data_chunk[42]<<8) + data_chunk[43])
    W[11] = ((data_chunk[44]<<24) + (data_chunk[45]<<16) + (data_chunk[46]<<8) + data_chunk[47])
    W[12] = ((data_chunk[48]<<24) + (data_chunk[49]<<16) + (data_chunk[50]<<8) + data_chunk[51])
    W[13] = ((data_chunk[52]<<24) + (data_chunk[53]<<16) + (data_chunk[54]<<8) + data_chunk[55])
    W[14] = ((data_chunk[56]<<24) + (data_chunk[57]<<16) + (data_chunk[58]<<8) + data_chunk[59])
    W[15] = ((data_chunk[60]<<24) + (data_chunk[61]<<16) + (data_chunk[62]<<8) + data_chunk[63])
    
    # for i in range(16,64):
    #     W.append( (Gamma1(W[i - 2]) + W[i - 7] + Gamma0(W[i - 15]) + W[i - 16]) & 0xffffffff )
    
    W[16] =((Gamma1(W[14]) + W[9 ] + Gamma0(W[1] ) + W[0] ) )#& 0xffffffff)
    W[17] =((Gamma1(W[15]) + W[10] + Gamma0(W[2] ) + W[1] ) )#& 0xffffffff)
    W[18] =((Gamma1(W[16]) + W[11] + Gamma0(W[3] ) + W[2] ) )#& 0xffffffff)
    W[19] =((Gamma1(W[17]) + W[12] + Gamma0(W[4] ) + W[3] ) )#& 0xffffffff)
    W[20] =((Gamma1(W[18]) + W[13] + Gamma0(W[5] ) + W[4] ) )#& 0xffffffff)
    W[21] =((Gamma1(W[19]) + W[14] + Gamma0(W[6] ) + W[5] ) )#& 0xffffffff)
    W[22] =((Gamma1(W[20]) + W[15] + Gamma0(W[7] ) + W[6] ) )#& 0xffffffff)
    W[23] =((Gamma1(W[21]) + W[16] + Gamma0(W[8] ) + W[7] ) )#& 0xffffffff)
    W[24] =((Gamma1(W[22]) + W[17] + Gamma0(W[9] ) + W[8] ) )#& 0xffffffff)
    W[25] =((Gamma1(W[23]) + W[18] + Gamma0(W[10]) + W[9] ) )#& 0xffffffff)
    W[26] =((Gamma1(W[24]) + W[19] + Gamma0(W[11]) + W[10]) )#& 0xffffffff)
    W[27] =((Gamma1(W[25]) + W[20] + Gamma0(W[12]) + W[11]) )#& 0xffffffff)
    W[28] =((Gamma1(W[26]) + W[21] + Gamma0(W[13]) + W[12]) )#& 0xffffffff)
    W[29] =((Gamma1(W[27]) + W[22] + Gamma0(W[14]) + W[13]) )#& 0xffffffff)
    W[30] =((Gamma1(W[28]) + W[23] + Gamma0(W[15]) + W[14]) )#& 0xffffffff)
    W[31] =((Gamma1(W[29]) + W[24] + Gamma0(W[16]) + W[15]) )#& 0xffffffff)
    W[32] =((Gamma1(W[30]) + W[25] + Gamma0(W[17]) + W[16]) )#& 0xffffffff)
    W[33] =((Gamma1(W[31]) + W[26] + Gamma0(W[18]) + W[17]) )#& 0xffffffff)
    W[34] =((Gamma1(W[32]) + W[27] + Gamma0(W[19]) + W[18]) )#& 0xffffffff)
    W[35] =((Gamma1(W[33]) + W[28] + Gamma0(W[20]) + W[19]) )#& 0xffffffff)
    W[36] =((Gamma1(W[34]) + W[29] + Gamma0(W[21]) + W[20]) )#& 0xffffffff)
    W[37] =((Gamma1(W[35]) + W[30] + Gamma0(W[22]) + W[21]) )#& 0xffffffff)
    W[38] =((Gamma1(W[36]) + W[31] + Gamma0(W[23]) + W[22]) )#& 0xffffffff)
    W[39] =((Gamma1(W[37]) + W[32] + Gamma0(W[24]) + W[23]) )#& 0xffffffff)
    W[40] =((Gamma1(W[38]) + W[33] + Gamma0(W[25]) + W[24]) )#& 0xffffffff)
    W[41] =((Gamma1(W[39]) + W[34] + Gamma0(W[26]) + W[25]) )#& 0xffffffff)
    W[42] =((Gamma1(W[40]) + W[35] + Gamma0(W[27]) + W[26]) )#& 0xffffffff)
    W[43] =((Gamma1(W[41]) + W[36] + Gamma0(W[28]) + W[27]) )#& 0xffffffff)
    W[44] =((Gamma1(W[42]) + W[37] + Gamma0(W[29]) + W[28]) )#& 0xffffffff)
    W[45] =((Gamma1(W[43]) + W[38] + Gamma0(W[30]) + W[29]) )#& 0xffffffff)
    W[46] =((Gamma1(W[44]) + W[39] + Gamma0(W[31]) + W[30]) )#& 0xffffffff)
    W[47] =((Gamma1(W[45]) + W[40] + Gamma0(W[32]) + W[31]) )#& 0xffffffff)
    W[48] =((Gamma1(W[46]) + W[41] + Gamma0(W[33]) + W[32]) )#& 0xffffffff)
    W[49] =((Gamma1(W[47]) + W[42] + Gamma0(W[34]) + W[33]) )#& 0xffffffff)
    W[50] =((Gamma1(W[48]) + W[43] + Gamma0(W[35]) + W[34]) )#& 0xffffffff)
    W[51] =((Gamma1(W[49]) + W[44] + Gamma0(W[36]) + W[35]) )#& 0xffffffff)
    W[52] =((Gamma1(W[50]) + W[45] + Gamma0(W[37]) + W[36]) )#& 0xffffffff)
    W[53] =((Gamma1(W[51]) + W[46] + Gamma0(W[38]) + W[37]) )#& 0xffffffff)
    W[54] =((Gamma1(W[52]) + W[47] + Gamma0(W[39]) + W[38]) )#& 0xffffffff)
    W[55] =((Gamma1(W[53]) + W[48] + Gamma0(W[40]) + W[39]) )#& 0xffffffff)
    W[56] =((Gamma1(W[54]) + W[49] + Gamma0(W[41]) + W[40]) )#& 0xffffffff)
    W[57] =((Gamma1(W[55]) + W[50] + Gamma0(W[42]) + W[41]) )#& 0xffffffff)
    W[58] =((Gamma1(W[56]) + W[51] + Gamma0(W[43]) + W[42]) )#& 0xffffffff)
    W[59] =((Gamma1(W[57]) + W[52] + Gamma0(W[44]) + W[43]) )#& 0xffffffff)
    W[60] =((Gamma1(W[58]) + W[53] + Gamma0(W[45]) + W[44]) )#& 0xffffffff)
    W[61] =((Gamma1(W[59]) + W[54] + Gamma0(W[46]) + W[45]) )#& 0xffffffff)
    W[62] =((Gamma1(W[60]) + W[55] + Gamma0(W[47]) + W[46]) )#& 0xffffffff)
    W[63] =((Gamma1(W[61]) + W[56] + Gamma0(W[48]) + W[47]) )#& 0xffffffff)

    ss = Array(8, sregint)
    # ss = [0]*(8)
    ss[0] = digest[0]
    ss[1] = digest[1]
    ss[2] = digest[2]
    ss[3] = digest[3]
    ss[4] = digest[4]
    ss[5] = digest[5]
    ss[6] = digest[6]
    ss[7] = digest[7]
    
    ss[3], ss[7] = RND(ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],0, W[0] ,0x428a2f98);
    ss[2], ss[6] = RND(ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],1, W[1] ,0x71374491);
    ss[1], ss[5] = RND(ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],2, W[2] ,0xb5c0fbcf);
    ss[0], ss[4] = RND(ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],3, W[3] ,0xe9b5dba5);
    ss[7], ss[3] = RND(ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],4, W[4] ,0x3956c25b);
    ss[6], ss[2] = RND(ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],5, W[5] ,0x59f111f1);
    ss[5], ss[1] = RND(ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],6, W[6] ,0x923f82a4);
    ss[4], ss[0] = RND(ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],7, W[7] ,0xab1c5ed5);
    ss[3], ss[7] = RND(ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],8, W[8] ,0xd807aa98);
    ss[2], ss[6] = RND(ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],9, W[9] ,0x12835b01);
    ss[1], ss[5] = RND(ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],10,W[10],0x243185be);
    ss[0], ss[4] = RND(ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],11,W[11],0x550c7dc3);
    ss[7], ss[3] = RND(ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],12,W[12],0x72be5d74);
    ss[6], ss[2] = RND(ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],13,W[13],0x80deb1fe);
    ss[5], ss[1] = RND(ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],14,W[14],0x9bdc06a7);
    ss[4], ss[0] = RND(ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],15,W[15],0xc19bf174);
    ss[3], ss[7] = RND(ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],16,W[16],0xe49b69c1);
    ss[2], ss[6] = RND(ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],17,W[17],0xefbe4786);
    ss[1], ss[5] = RND(ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],18,W[18],0x0fc19dc6);
    ss[0], ss[4] = RND(ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],19,W[19],0x240ca1cc);
    ss[7], ss[3] = RND(ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],20,W[20],0x2de92c6f);
    ss[6], ss[2] = RND(ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],21,W[21],0x4a7484aa);
    ss[5], ss[1] = RND(ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],22,W[22],0x5cb0a9dc);
    ss[4], ss[0] = RND(ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],23,W[23],0x76f988da);
    ss[3], ss[7] = RND(ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],24,W[24],0x983e5152);
    ss[2], ss[6] = RND(ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],25,W[25],0xa831c66d);
    ss[1], ss[5] = RND(ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],26,W[26],0xb00327c8);
    ss[0], ss[4] = RND(ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],27,W[27],0xbf597fc7);
    ss[7], ss[3] = RND(ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],28,W[28],0xc6e00bf3);
    ss[6], ss[2] = RND(ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],29,W[29],0xd5a79147);
    ss[5], ss[1] = RND(ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],30,W[30],0x06ca6351);
    ss[4], ss[0] = RND(ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],31,W[31],0x14292967);
    ss[3], ss[7] = RND(ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],32,W[32],0x27b70a85);
    ss[2], ss[6] = RND(ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],33,W[33],0x2e1b2138);
    ss[1], ss[5] = RND(ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],34,W[34],0x4d2c6dfc);
    ss[0], ss[4] = RND(ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],35,W[35],0x53380d13);
    ss[7], ss[3] = RND(ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],36,W[36],0x650a7354);
    ss[6], ss[2] = RND(ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],37,W[37],0x766a0abb);
    ss[5], ss[1] = RND(ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],38,W[38],0x81c2c92e);
    ss[4], ss[0] = RND(ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],39,W[39],0x92722c85);
    ss[3], ss[7] = RND(ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],40,W[40],0xa2bfe8a1);
    ss[2], ss[6] = RND(ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],41,W[41],0xa81a664b);
    ss[1], ss[5] = RND(ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],42,W[42],0xc24b8b70);
    ss[0], ss[4] = RND(ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],43,W[43],0xc76c51a3);
    ss[7], ss[3] = RND(ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],44,W[44],0xd192e819);
    ss[6], ss[2] = RND(ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],45,W[45],0xd6990624);
    ss[5], ss[1] = RND(ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],46,W[46],0xf40e3585);
    ss[4], ss[0] = RND(ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],47,W[47],0x106aa070);
    ss[3], ss[7] = RND(ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],48,W[48],0x19a4c116);
    ss[2], ss[6] = RND(ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],49,W[49],0x1e376c08);
    ss[1], ss[5] = RND(ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],50,W[50],0x2748774c);
    ss[0], ss[4] = RND(ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],51,W[51],0x34b0bcb5);
    ss[7], ss[3] = RND(ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],52,W[52],0x391c0cb3);
    ss[6], ss[2] = RND(ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],53,W[53],0x4ed8aa4a);
    ss[5], ss[1] = RND(ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],54,W[54],0x5b9cca4f);
    ss[4], ss[0] = RND(ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],55,W[55],0x682e6ff3);
    ss[3], ss[7] = RND(ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],56,W[56],0x748f82ee);
    ss[2], ss[6] = RND(ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],57,W[57],0x78a5636f);
    ss[1], ss[5] = RND(ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],58,W[58],0x84c87814);
    ss[0], ss[4] = RND(ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],ss[4],59,W[59],0x8cc70208);
    ss[7], ss[3] = RND(ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],ss[3],60,W[60],0x90befffa);
    ss[6], ss[2] = RND(ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],ss[2],61,W[61],0xa4506ceb);
    ss[5], ss[1] = RND(ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],ss[1],62,W[62],0xbef9a3f7);
    ss[4], ss[0] = RND(ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],ss[0],63,W[63],0xc67178f2);

    digest[0] = (digest[0] + ss[0]) #& 0xffffffff
    digest[1] = (digest[1] + ss[1]) #& 0xffffffff
    digest[2] = (digest[2] + ss[2]) #& 0xffffffff
    digest[3] = (digest[3] + ss[3]) #& 0xffffffff
    digest[4] = (digest[4] + ss[4]) #& 0xffffffff
    digest[5] = (digest[5] + ss[5]) #& 0xffffffff
    digest[6] = (digest[6] + ss[6]) #& 0xffffffff
    digest[7] = (digest[7] + ss[7]) #& 0xffffffff
    
    # final_data = Array(SHA_BLOCKSIZE, sregint)
    # final_data = [0]*SHA_BLOCKSIZE
    # final_data[0] = ((digest[0]>>24) & 0xff)
    # final_data[1] = ((digest[0]>>16) & 0xff)
    # final_data[2] = ((digest[0]>>8 ) & 0xff)
    # final_data[3] = ( digest[0]      & 0xff)

    # final_data[4] = ((digest[1]>>24) & 0xff)
    # final_data[5] = ((digest[1]>>16) & 0xff)
    # final_data[6] = ((digest[1]>>8 ) & 0xff)
    # final_data[7] = ( digest[1]      & 0xff)

    # final_data[8]  = ((digest[2]>>24) & 0xff)
    # final_data[9]  = ((digest[2]>>16) & 0xff)
    # final_data[10] = ((digest[2]>>8 ) & 0xff)
    # final_data[11] = ( digest[2]      & 0xff)

    # final_data[12] = ((digest[3]>>24) & 0xff)
    # final_data[13] = ((digest[3]>>16) & 0xff)
    # final_data[14] = ((digest[3]>>8 ) & 0xff)
    # final_data[15] = ( digest[3]      & 0xff)



digest = Array(8, sregint)
#digest = sregint.Array(8)

#Set the buffer initials
digest[0] = 0x6A09E667
digest[1] = 0xBB67AE85
digest[2] = 0x3C6EF372
digest[3] = 0xA54FF53A
digest[4] = 0x510E527F
digest[5] = 0x9B05688C
digest[6] = 0x1F83D9AB
digest[7] = 0x5BE0CD19

msg_length = 100 #regint.public_input()
hi_bit_count = msg_length >> 29 # >>32 and tehn *8 (see below).  will always be zero
lo_bit_count = msg_length << 3 # just *8 for the bytes to bits conversion
num_blocks = int((msg_length+1)/64) +1
data_length = (num_blocks)*64

msg_data = Array(data_length, sregint)
#msg_data = [ sregint(0) for _ in range(data_length)]

#Pack the initial data  
# Should be the message, followed by x80 (a single 1 bit) followed by zeros until there are only 64 bits of space left
# then append the 64bit big endian representation of the data to 
for i in range(msg_length):
    msg_data[i] = sregint(sint.get_private_input_from(0))

msg_data[msg_length] = 0x80

for i in range(msg_length+1, data_length-8):
    msg_data[i] = sregint(0)

msg_data[data_length-8] = (hi_bit_count >> 24) # & 0xff
msg_data[data_length-7] = (hi_bit_count >> 16) # & 0xff
msg_data[data_length-6] = (hi_bit_count >>  8) # & 0xff
msg_data[data_length-5] = (hi_bit_count >>  0) # & 0xff
msg_data[data_length-4] = (lo_bit_count >> 24) # & 0xff
msg_data[data_length-3] = (lo_bit_count >> 16) # & 0xff
msg_data[data_length-2] = (lo_bit_count >>  8) # & 0xff
msg_data[data_length-1] = (lo_bit_count >>  0) # & 0xff

def loop_body(itr):
    index = (num_blocks-itr)*64
    data_to_be_processed = Array(64,sregint) #[sregint() for _ in range(64)]#
    for i in range(64):
        data_to_be_processed[i] = msg_data[index+i]
    sha_transform(digest, data_to_be_processed)
    return itr-1

itr = cint(num_blocks)
do_loop(itr, loop_body)

for i in range(8):
    sint(digest[i]).reveal_to(1)